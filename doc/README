ncdns
-----

A Go daemon to bridge Namecoin to DNS. The daemon acts as an authoritative
nameserver and queries a Namecoin daemon over JSON-RPC in order to obtain zone
data.

The daemon can optionally sign zones with DNSSEC and supports the use of DS
records in Namecoin.

Using ncdns to provide a suffix
-------------------------------
The daemon acts as an authoritative nameserver for any name containing a 'bit'
label. For example, all of the following queries return the same records:

  - example.bit.
  - example.bit.example.com.

This enables the easy use of suffixes. (Note that this will cause a different
hostname to be transmitted for protocols like HTTP, and server configuration
may need to be modified to enable this. In some cases there may be no simple
solution to enabling arbitrary suffix use with a given piece of server
software, in which known suffixes can be configured; patches for such software
would be desirable.)

Using ncdns with a recursive resolver
-------------------------------------
Of course the daemon can also be use simply as an authoritative nameserver for
bit. directly. One way to do this is to run a recursive resolver (such as
Unbound) and configure it to serve the zone as a 'stub zone'. Here is an example
unbound configuration:

    server:
      stub-zone:
        name: bit.
        stub-addr: 127.0.0.1@1153

Note how you can specify a port other than 53. This allows you to run both
Unbound and ncdns on the same machine. Alternately, you could add an additional
loopback IP address (127.0.0.2) and bind ncdns to that. This is useful if your
recursive resolver doesn't support a port number other than 53.

Using DNSSEC
------------
To use DNSSEC, generate keys with `dnssec-keygen` or `ldns-keygen`. You will need
to generate a key-signing key and a zone-signing key:

    # Generate KSK.
    $ dnssec-keygen -a RSASHA256 -3 -b 2048 -f KSK bit

    # Generate ZSK.
    $ dnssec-keygen -a RSASHA256 -3 -b 2048 bit

Each of these commands will generate a pair of files, a `.key` file and a
`.private` file.  Make a note of which is the KSK and which is the ZSK. If you
forget, check the comments inside the .key file. (If there are no comments for
some reason, a KSK usually contains the string `DNSKEY 256` and a ZSK
`DNSKEY 257`.)

(You could substitute something else for `bit` as ncdns doesn't care. However
if you want to use the key as a trust anchor with a recursive resolver such as
unbound, you should specify `bit`.)

If using Unbound as a recursive resolver, you should add the KSK's public key file
as a trust anchor to unbound like so:

    server:
      trust-anchor-file: "/etc/unbound/keys/bit.key"

`bit.key` should be the file containing the KSK DNSKEY (or DS) which ncdns is
configured to use.

Configuration
-------------
ncdns uses a configuration file which is looked for at `./etc/ncdns.conf` and
`/etc/ncdns/ncdns.conf`. You can override this and all options on the command
line. An annotated example configuration file `ncdns.conf.example` is available
in doc.

LICENSE
-------
  Licenced under the GPLv3 or later.
  Â© 2014 Hugo Landau <hlandau@devever.net>
